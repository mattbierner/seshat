/**
 * @fileOverview Memoization utility.
 */
package (
    create
    lookup
    update
    prune)
{

var equals = \x y -> x === y;

var max = \x y -> (x > y ? x : y);

var heightFromChild = \child ->
    (child ? 1 + child.height : 0);

var height = \root ->
    (!root ? 0 :
        max(
            heightFromChild(root.left),
            heightFromChild(root.right)));

var bf = \node ->
    (!node ? 0 :
        heightFromChild(node.left) - heightFromChild(node.right));

/* Data Structures
 ******************************************************************************/
// Cell
////////////////////////////////////////
/**
 * Memoization cell
 * 
 * Stores a value for a given id. Cells form a linked list.
 * 
 * @param id Unique identifier for 
 */
var Cell = function(id, val, delegate) {
    this.id = id;
    this.val = val;
    this.delegate = delegate;
};

/**
 * Lookup a value, if any, stored in a match cell for 'state'.
 */
Cell.lookup = \base eq id -> {
    for (var cell = base; cell; cell = cell.delegate)
        if (eq(cell.id, id))
            return cell.val;
    return null;
};

// Node
////////////////////////////////////////
/**
 * 
 */
var Node = function(key, cell, l, r, height) {
    this.key = key;
    this.cell = cell;
    this.left = l;
    this.right = r;
    this.height = height;
};

Node.setChildren = \node l r ->
    new Node(
        node.key,
        node.cell,
        l,
        r,
        (l || r ? 1 + max(height(l), height(r)) : 0));

Node.setLeft = \node l ->
    Node.setChildren(node, l, node.right);
    
Node.setRight = \node r ->
    Node.setChildren(node, node.left, r);

/**
 */
Node.lookup = \root compare eq key id -> {
    for (var node = root; node;) {
        var diff = compare(key, node.key);
        if (diff === 0)
            return Cell.lookup(node.cell, eq, id);
        node = (diff < 0 ? node.left : node.right);
    }
    return null;
};

/**
 */
Node.put = \node id val ->
    new Node(
        node.key,
        new Cell(
            id,
            val,
            node.cell),
        node.left,
        node.right,
        node.height);

/* Tree Operations
 ******************************************************************************/
/**
 * Right rotation
 */
var rr = \node -> 
    (!node ? node :
        Node.setLeft(
            node.right,
            Node.setRight(
                node,
                node.right.left)));
/**
 * Left rotation
 */
var ll = \node ->
    (!node ? node :
        Node.setRight(
            node.left,
            Node.setLeft(
                node,
                node.left.right)));

/**
 * Left-right rotation
 */
var lr = \node ->
    ll(Node.setLeft(node, rr(node.left)));

/**
 * Right-left rotation.
 */
var rl = \node ->
    rr(Node.setRight(node, ll(node.right)));

/**
 * Perform a single rotation based on the balance factor.
 */
var rot = \node -> {
    var d = bf(node);
    if (d > 1)
        return (bf(node.left) <= -1 ? lr(node) : ll(node));
    else if (d < -1) 
        return (bf(node.right) >= 1 ? rl(node) : rr(node));
    return node;
};

/**
 * Update the value stored for `key` and `id`.
 */
Node.update = \root compare key id val -> {
    if (!root)
        return new Node(key, new Cell(id, val, null), null, null, 0);
    
    var diff = compare(key, root.key);
    if (diff === 0)
        return Node.put(root, id, val);
    
    return rot(diff < 0 ?
        Node.setLeft(root, Node.update(root.left, compare, key, id, val)) :
        Node.setRight(root, Node.update(root.right, compare, key, id, val)));
};

/**
 * Completely rebalance a given tree.
 */
Node.rebalance = \root ->
    (Math.abs(bf(root)) <= 1 ? root :
        rot(
            Node.setChildren(
                root,
                Node.rebalance(root.left),
                Node.rebalance(root.right))));

/**
 * Prune a given tree to remove node outside of `[lower, upper)`.
 * 
 * Does not automatically rebalance.
 */
Node.prune =  \root compare lower upper -> {
    if (!root)
        return root;
    
    if (lower !== undefined ) {
        var dl = compare(root.key, lower);
        if (dl < 0)
            return Node.prune(root.right, compare, lower, upper);
        else if (dl === 0)
            return Node.setChildren(root, null, Node.prune(root.right, compare, undefined, upper));
    }
    
    if (upper !== undefined && compare(root.key, upper) >= 0)
        return Node.prune(root.left, compare, lower, upper);
   
    return Node.setChildren(
        root,
        Node.prune(root.left, compare, lower, upper),
        Node.prune(root.right, compare, lower, upper));
};

/* Memoer
 ******************************************************************************/
/**
 * Stores values by a comparable key and unique id.
 * 
 * @param compare Function that compares two keys, returning their relative order.
 * @param eq Predicate function that determines if two identities are equal.
 * @param root Root of the tree.
 */
var Memoer = function(compare, eq, root) {
    this.compare = compare;
    this.eq = eq;
    this.root = root;
};

Memoer.setRoot = \m root ->
    new Memoer(
        m.compare,
        m.eq,
        root);

/* API
 ******************************************************************************/
/**
 * Create a new memoer.
 * 
 * @param comparison Function that compares two keys, returning their relative order.
 * @param [eq] Predicate function that determines if two identities are equal.
 */
create = \compare eq ->
    new Memoer(
        compare,
        (eq || equals),
        null);

/**
 * Lookup a value.
 * 
 * Returns null if none.
 * 
 * @param m Memoer
 * @param key Key for node.
 * @param id Unique identifier for result.
 */
lookup = \m key id ->
    Node.lookup(
        m.root,
        m.compare,
        m.eq,
        key,
        id);

/**
 * Store a value
 * 
 * Replaces existing value
 * 
 * @param m Memoer
 * @param key Key for node.
 * @param id Unique identifier for result.
 * @param val Value to store.
 */
update = \m key id val ->
    Memoer.setRoot(
        m,
        Node.update(
            m.root,
            m.compare,
            key,
            id,
            val));

/**
 * Prune memoer to exclude key values outside of `[lower, upper)`
 * 
 * @param m Memoer
 * @param lower Inclusive lower bound.
 * @param [upper] Exclusive upper bound.
 */
prune = \m lower upper ->
    Memoer.setRoot(
        m,
        Node.rebalance(
            Node.prune(
                m.root,
                m.compare,
                lower,
                upper)));
}